# Bubble Sort: Sort an array in ascending order

    .pos 0
Array:  .quad 4, 3, 1, 5, 2   # Array to sort
Length: .quad 5               # Length of array

# Start of program
    .pos 64
Main:
    movq $Array, %rdi         # Load address of Array into %rdi
    movq $5, %rsi             # Length of the array (outer loop counter)
    subq $1, %rsi             # Outer loop: n - 1 iterations

OuterLoop:
    movq $0, %rdx             # Inner loop counter (j = 0)
    movq %rsi, %rcx           # Copy outer loop counter to inner limit

InnerLoop:
    movq (%rdi, %rdx, 8), %rax # Load Array[j] into %rax
    movq 8(%rdi, %rdx, 8), %rbx # Load Array[j+1] into %rbx
    cmpq %rbx, %rax           # Compare Array[j] with Array[j+1]
    jle NoSwap                # If Array[j] <= Array[j+1], skip swap

    # Swap Array[j] and Array[j+1]
    movq %rbx, (%rdi, %rdx, 8)  # Store Array[j+1] in Array[j]
    movq %rax, 8(%rdi, %rdx, 8) # Store Array[j] in Array[j+1]

NoSwap:
    addq $1, %rdx             # Increment inner loop counter
    subq $1, %rcx             # Decrement inner limit
    jnz InnerLoop             # Repeat inner loop if inner limit != 0

    subq $1, %rsi             # Decrement outer loop counter
    jnz OuterLoop             # Repeat outer loop if counter != 0

    ret                       # Return
