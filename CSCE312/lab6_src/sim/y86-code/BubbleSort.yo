                            | # Bubble Sort for an array of 4 elements stored in memory (at 0x100, 0x108, 0x110, 0x118)
                            | # The sorted array will overwrite the original data.
                            | 
                            | # Array Addresses
0x000: 30f70001000000000000 | irmovq $0x100, %rdi      # Address of the first element
0x00a: 30f60801000000000000 | irmovq $0x108, %rsi      # Address of the second element
0x014: 30f21001000000000000 | irmovq $0x110, %rdx      # Address of the third element
0x01e: 30f11801000000000000 | irmovq $0x118, %rcx      # Address of the fourth element
                            | 
                            | # Pass 1: Compare and Swap for each adjacent pair
0x028: 30f01e00000000000000 | irmovq $30, %rax         # Load array[0] (e.g., 30) into %rax
0x032: 30f30a00000000000000 | irmovq $10, %rbx         # Load array[1] (e.g., 10) into %rbx
0x03c: 6130                 | subq %rbx, %rax          # Compare array[0] - array[1]
0x03e: 716f00000000000000   | jle skip_swap1           # If array[0] <= array[1], skip swap
                            | # Swap array[0] and array[1]
0x047: 30f00a00000000000000 | irmovq $10, %rax         # Reload array[1] (10) into %rax
0x051: 30f31e00000000000000 | irmovq $30, %rbx         # Reload array[0] (30) into %rbx
0x05b: 400f0001000000000000 | rmmovq %rax, 0x100       # Store new array[0] (10)
0x065: 403f0801000000000000 | rmmovq %rbx, 0x108       # Store new array[1] (30)
                            | 
0x06f:                      | skip_swap1:
0x06f: 30f01e00000000000000 | irmovq $30, %rax         # Load array[1] into %rax
0x079: 30f31400000000000000 | irmovq $20, %rbx         # Load array[2] into %rbx
0x083: 6130                 | subq %rbx, %rax          # Compare array[1] - array[2]
0x085: 71b600000000000000   | jle skip_swap2           # If array[1] <= array[2], skip swap
                            | # Swap array[1] and array[2]
0x08e: 30f01400000000000000 | irmovq $20, %rax         # Reload array[2] (20) into %rax
0x098: 30f31e00000000000000 | irmovq $30, %rbx         # Reload array[1] (30) into %rbx
0x0a2: 400f0801000000000000 | rmmovq %rax, 0x108       # Store new array[1] (20)
0x0ac: 403f1001000000000000 | rmmovq %rbx, 0x110       # Store new array[2] (30)
                            | 
0x0b6:                      | skip_swap2:
0x0b6: 30f01e00000000000000 | irmovq $30, %rax         # Load array[2] into %rax
0x0c0: 30f32800000000000000 | irmovq $40, %rbx         # Load array[3] into %rbx
0x0ca: 6130                 | subq %rbx, %rax          # Compare array[2] - array[3]
0x0cc: 71fd00000000000000   | jle skip_swap3           # If array[2] <= array[3], skip swap
                            | # Swap array[2] and array[3]
0x0d5: 30f02800000000000000 | irmovq $40, %rax         # Reload array[3] (40) into %rax
0x0df: 30f31e00000000000000 | irmovq $30, %rbx         # Reload array[2] (30) into %rbx
0x0e9: 400f1001000000000000 | rmmovq %rax, 0x110       # Store new array[2] (40)
0x0f3: 403f1801000000000000 | rmmovq %rbx, 0x118       # Store new array[3] (30)
                            | 
0x0fd:                      | skip_swap3:
                            | # Pass 2 and subsequent passes would follow a similar approach.
                            | 
0x0fd: 00                   | halt
