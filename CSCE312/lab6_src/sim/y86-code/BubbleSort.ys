# Bubble Sort for an array of 4 elements stored in memory (at 0x100, 0x108, 0x110, 0x118)
# The sorted array will overwrite the original data.

# Array Addresses
irmovq $0x100, %rdi      # Address of the first element
irmovq $0x108, %rsi      # Address of the second element
irmovq $0x110, %rdx      # Address of the third element
irmovq $0x118, %rcx      # Address of the fourth element

# Pass 1: Compare and Swap for each adjacent pair
irmovq $30, %rax         # Load array[0] (e.g., 30) into %rax
irmovq $10, %rbx         # Load array[1] (e.g., 10) into %rbx
subq %rbx, %rax          # Compare array[0] - array[1]
jle skip_swap1           # If array[0] <= array[1], skip swap
# Swap array[0] and array[1]
irmovq $10, %rax         # Reload array[1] (10) into %rax
irmovq $30, %rbx         # Reload array[0] (30) into %rbx
rmmovq %rax, 0x100       # Store new array[0] (10)
rmmovq %rbx, 0x108       # Store new array[1] (30)

skip_swap1:
irmovq $30, %rax         # Load array[1] into %rax
irmovq $20, %rbx         # Load array[2] into %rbx
subq %rbx, %rax          # Compare array[1] - array[2]
jle skip_swap2           # If array[1] <= array[2], skip swap
# Swap array[1] and array[2]
irmovq $20, %rax         # Reload array[2] (20) into %rax
irmovq $30, %rbx         # Reload array[1] (30) into %rbx
rmmovq %rax, 0x108       # Store new array[1] (20)
rmmovq %rbx, 0x110       # Store new array[2] (30)

skip_swap2:
irmovq $30, %rax         # Load array[2] into %rax
irmovq $40, %rbx         # Load array[3] into %rbx
subq %rbx, %rax          # Compare array[2] - array[3]
jle skip_swap3           # If array[2] <= array[3], skip swap
# Swap array[2] and array[3]
irmovq $40, %rax         # Reload array[3] (40) into %rax
irmovq $30, %rbx         # Reload array[2] (30) into %rbx
rmmovq %rax, 0x110       # Store new array[2] (40)
rmmovq %rbx, 0x118       # Store new array[3] (30)

skip_swap3:
# Pass 2 and subsequent passes would follow a similar approach.

halt
