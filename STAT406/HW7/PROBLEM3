# Re-run the analysis using only the first 8 observations from the dataset.
import numpy as np
import pandas as pd
import statsmodels.api as sm
import matplotlib.pyplot as plt
# Define the dataset for the first 8 observations
data_first_8 = {
    'A': [-1, 1, -1, 1, -1, 1, -1, 1],
    'B': [-1, -1, 1, 1, -1, -1, 1, 1],
    'C': [-1, -1, -1, -1, 1, 1, 1, 1],
    'D': [1, -1, -1, 1, 1, -1, -1, 1],
    'E': [1, -1, 1, -1, -1, 1, -1, 1],
    'G': [-1, 1, 1, -1, 1, -1, -1, 1],
    'F': [1, 1, -1, -1, -1, -1, 1, 1],
    'y': [69.95, 58.65, 56.25, 53.25, 94.4, 73.45, 10, 2.11]
}

# Convert to DataFrame
df_first_8 = pd.DataFrame(data_first_8)

# Add a constant for the intercept
X_first_8 = df_first_8[['A', 'B', 'C', 'D', 'E', 'G', 'F']]
X_first_8 = sm.add_constant(X_first_8)  # Adds the intercept term to the model
y_first_8 = df_first_8['y']

# Fit the model using Ordinary Least Squares (OLS)
model_first_8 = sm.OLS(y_first_8, X_first_8)
results_first_8 = model_first_8.fit()

# Print the summary of the model to see the coefficients and significance levels
model_summary_first_8 = results_first_8.summary()

# Calculate residuals and plot the residual by predicted plot
y_pred_first_8 = results_first_8.predict(X_first_8)
residuals_first_8 = y_first_8 - y_pred_first_8

# Plot Residual by Predicted Values
plt.scatter(y_pred_first_8, residuals_first_8)
plt.axhline(y=0, color='r', linestyle='--')
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.title('Residual by Predicted Plot (First 8 Observations)')
plt.show()

# Report adjusted R-squared
adjusted_r_squared_first_8 = results_first_8.rsquared_adj

(model_summary_first_8, adjusted_r_squared_first_8)
